/*global module */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) { // CommonJS environment.

		module.exports = global.document ?
			factory( global, true ) :	// some kind of `browser global' is present, return jQuery as the module exports.
			function( w ) {				// no real `window', return a function as module exports that accepts window and returns jQuery.
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );	// No second argument (see line #34).
                						// If some kind of `browser global' will be passed to the exported anonymous function,
                						// attach jQuery and $ identifiers to it and return jQuery function as well.
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
    
var
	version = "2.2.4",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// bla-bla-bla;
	};
    
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}

    return jQuery;
}));
